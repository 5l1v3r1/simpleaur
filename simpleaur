#!/bin/sh
# install AUR packages
basebuilddir="$HOME/.simpleaur/Build"
pacmanexist=$(which pacman 2> /dev/null)

#Make sure that you are using an ArchLinux system
if [ -x "$pacmanexist" ]; then
    continue
else
    printf "\e[1;31m%-6s\e[m%s\n" "You are not using ArchLinux, pacman was not found in ($PATH)"
fi

#Check if the base Build DIR exists, if not create it.
if [ ! -d "$basebuilddir" ]; then
    mkdir -p "$basebuilddir"
fi

if [[ "$@" ]]; then
    cd "$basebuilddir" || exit
else
    printf "\e[1;31m%-6s\e[m%s\n" "Please, pass AUR package(s) name(s) to simpleaur."
fi

# Download the PKGBUILDs.
for ipackage in "$@"; do
    git clone "https://aur.archlinux.org/${ipackage}.git"
done


# Check PKGBUILDs.
for ipackage in "$@"; do
    cd "$basebuilddir/$ipackage" && ${EDITOR} PKGBUILD || exit
done

cd "$basebuilddir"

# Install packages.
for ipackage in "$@"; do
    #Check if PKGBUILD exist
    if [ -f "$ipackage/PKGBUILD" ]; then
        cd "$ipackage"
        makepkg -sci
        if [ "$?" -eq 0 ]; then
            #Ask to the user if want to remove the directory created for git
            read -p "Remove build directory? [Y/n]? " yn
            #Take the answer from the user input and decide what to do.
            if [ "$yn" = "y" ]; then
                printf "\e[1;32m%-6s\e[m\n%s\n" "Removing build directory..."
                rm -rf "$basebuilddir/$ipackage"
            else
                printf "\e[1;32m%-6s\e[m\n%s\n" "Instalation completed."
            fi
        else
            printf "\e[1;31m%-6s\e[m%s\n" "Installation not completed."
        fi
        cd "$basebuilddir"
    else
        printf "\e[1;31m%-6s\e[m%s\n" "The PKGBUILD file for $ipackage does not exist, please check your internet connection and make sure that the AUR package name exists, you can use simplesearch for that."
        printf "\e[1;32m%-6s\e[m\n%s\n" "Removing the failed build directory..."
        rm -rf "$basebuilddir/$ipackage"
    fi
done
